class Solution:
    def getMaxSum(self, root):
        # Helper function that returns a tuple (include, exclude)
        def dfs(node):
            if not node:
                return (0, 0)
            
            # Recursively calculate for left and right subtrees
            left_include, left_exclude = dfs(node.left)
            right_include, right_exclude = dfs(node.right)
            
            # If we include this node, we cannot include its children
            include = node.data + left_exclude + right_exclude
            
            # If we exclude this node, we can take the maximum of including or excluding its children
            exclude = max(left_include, left_exclude) + max(right_include, right_exclude)
            
            return (include, exclude)
        
        # Start DFS from the root
        include, exclude = dfs(root)
        return max(include, exclude)
