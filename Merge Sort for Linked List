'''
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
'''

class Solution:
    def mergeSort(self, head):
        # Base case
        if not head or not head.next:
            return head
        
        # Step 1: Split the list into two halves
        mid = self.getMiddle(head)
        next_half = mid.next
        mid.next = None
        
        # Step 2: Recursive sort
        left = self.mergeSort(head)
        right = self.mergeSort(next_half)
        
        # Step 3: Merge the sorted halves
        return self.sortedMerge(left, right)
    
    def getMiddle(self, head):
        slow, fast = head, head.next
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        return slow
    
    def sortedMerge(self, a, b):
        if not a: return b
        if not b: return a
        
        if a.data <= b.data:
            result = a
            result.next = self.sortedMerge(a.next, b)
        else:
            result = b
            result.next = self.sortedMerge(a, b.next)
        return result

