Problem Link : https://www.geeksforgeeks.org/problems/sort-an-array-of-0s-1s-and-2s4231/1


class Solution:
    def sort012(self, arr):
        low, mid, high = 0, 0, len(arr) - 1
        
        while mid <= high:
            if arr[mid] == 0:
                arr[low], arr[mid] = arr[mid], arr[low]
                low += 1
                mid += 1
            elif arr[mid] == 1:
                mid += 1
            else:  # arr[mid] == 2
                arr[mid], arr[high] = arr[high], arr[mid]
                high -= 1
        return arr
        



class Solution:
    def sortColors(self, nums: List[int]) -> None:

        # dutch natonal flag problem  
        left, mid, right = 0, 0, len(nums)-1
        while mid <= right :
            # if 0 found, swap left with mid and move one step+ both
            if nums[mid] == 0 :
                nums[mid], nums[left] = nums[left], nums[mid]
                left += 1
            # if 2 found, swap right with mid and move one step- for right 
            # and don't move mid (it may be 0 or 1)
            elif nums[mid] == 2 :
                nums[mid], nums[right] = nums[right], nums[mid] 
                right -= 1
                mid -= 1

            mid += 1

    ''' time complexity O(N) and constant space complexity  '''



-----------------------------------------------------------------------------------------------------------------------------------------
class Solution:
    def sortColors(self, nums: List[int]) -> None:

        # bucket sort method 
        n = [0, 0, 0]
        for i in nums :
            n[i] += 1
        id = 0
        for i in range(n[0]) :
            nums[id] = 0
            id += 1
        for i in range(n[1]) :
            nums[id] = 1
            id += 1
        for i in range(n[2]) :
            nums[id] = 2
            id += 1

        ''' time complexity O(n) and constant space complexity '''
