

class Solution:
    def sumClosest(self, arr, target):
        # Edge case: If the array has fewer than 2 elements, return an empty list
        if len(arr) < 2:
            return []

        # Sort the array
        arr.sort()

        # Initialize variables
        left, right = 0, len(arr) - 1
        closest_sum = float('inf')  # To track the closest sum to the target
        result = []  # To store the result pair

        while left < right:
            current_sum = arr[left] + arr[right]

            # Check if the current sum is closer to the target
            if abs(target - current_sum) < abs(target - closest_sum):
                closest_sum = current_sum
                result = [arr[left], arr[right]]

            # If the current sum is equally close to the target, consider absolute difference
            elif abs(target - current_sum) == abs(target - closest_sum):
                if abs(arr[left] - arr[right]) > abs(result[0] - result[1]):
                    result = [arr[left], arr[right]]

            # Move the pointers based on the comparison of current_sum and target
            if current_sum < target:
                left += 1
            else:
                right -= 1

        return result
