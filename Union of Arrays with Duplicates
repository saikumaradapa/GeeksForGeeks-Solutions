Problem Link : https://www.geeksforgeeks.org/problems/union-of-two-arrays3538/1

class Solution:    
    def findUnion(self, a, b):
        count = 0 
        lastElement = -1
        
        a.sort()
        b.sort()
        
        i, j, n, m = 0, 0, len(a), len(b)
        
        while i < n and j < m:
            if a[i] < b[j]:
                if a[i] != lastElement:
                    count += 1
                    lastElement = a[i]
                i += 1 
            elif a[i] > b[j]:
                if b[j] != lastElement:
                    count += 1
                    lastElement = b[j]
                j += 1 
            else:
                if a[i] != lastElement:
                    count += 1
                    lastElement = a[i]
                i, j = i+1, j+1
        
        while i < n:
            if a[i] != lastElement:
                count += 1
                lastElement = a[i]
            i += 1
        
        while j < m:
            if b[j] != lastElement:
                count += 1
                lastElement = b[j]
            j += 1 
            
        return count 


''' time complexity : O(n + m)        
    space complexity : O(1)
'''

################################################################################################################################################################################


class Solution:
    def findUnion(self, a, b):
        union_set = set(a).union(b)
        return len(union_set)

''' time complexity : O(n + m)        
    space complexity : O(n + m)
'''
